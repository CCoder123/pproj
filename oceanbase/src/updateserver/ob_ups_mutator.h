/**
 * (C) 2010-2011 Alibaba Group Holding Limited.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * version 2 as published by the Free Software Foundation.
 * 
 * Version: $Id$
 *
 * ob_ups_mutator.h for ...
 *
 * Authors:
 *   rizhao <rizhao.ych@taobao.com>
 *
 */
#ifndef __OCEANBASE_CHUNKSERVER_UPS_MUTATOR_H__
#define __OCEANBASE_CHUNKSERVER_UPS_MUTATOR_H__

#include "common/ob_mutator.h"

namespace oceanbase
{
  namespace updateserver
  {
    // ObUpsMutator is the internal mutator class used by Update Server.
    // It may be the mutator received from client API, and it can also be FREEZE_MEMTABLE
    // and DROP_MEMTABLE command generated by Update Server Master and then replicated to
    // Update Server Slave.
    class ObUpsMutator
    {
      public:
        ObUpsMutator();
        virtual ~ObUpsMutator();

      public:
        // Gets the associated mutator
        common::ObMutator& get_mutator();

      public:
        int set_freeze_memtable();
        int set_drop_memtable();
        int set_first_start();
        bool is_normal_mutator() const;
        bool is_freeze_memtable() const;
        bool is_drop_memtable() const;
        bool is_first_start() const;
        void set_mutate_timestamp(const int64_t timestamp);
        int64_t get_mutate_timestamp() const;
        void set_memtable_checksum_before_mutate(const int64_t checksum);
        int64_t get_memtable_checksum_before_mutate() const;
        void set_memtable_checksum_after_mutate(const int64_t checksum);
        int64_t get_memtable_checksum_after_mutate() const;

      public:
        virtual void reset_iter();
        virtual int next_cell();
        virtual int get_cell(common::ObMutatorCellInfo** cell);

      public:
        int serialize(char* buf, const int64_t buf_len, int64_t& pos) const;
        int deserialize(const char* buf, const int64_t buf_len, int64_t& pos);
        int64_t get_serialize_size(void) const;

      private:
        static const int32_t NORMAL_FLAG = 0;
        static const int32_t FREEZE_FLAG = 1;
        static const int32_t DROP_FLAG = 2;
        static const int32_t START_FLAG = 3;

      private:
        int32_t version_;
        int32_t flag_; // freeze/drop/row_exist flag
        int64_t mutate_timestamp_;
        int64_t memtable_checksum_before_mutate_;
        int64_t memtable_checksum_after_mutate_;
        common::ObMutator mutator_;
    };
  }
}

#endif //__UPS_MUTATOR_H__



